// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package internal;
option go_package = "github.com/livekit/psrpc/internal";

import "google/protobuf/any.proto";

// Msg 消息结构体
message Msg {
  string type_url = 1; // 类型URL
  bytes value = 2; // 值
  string channel = 3; // 通道
}

// Channel 通道结构体
message Channel {
  string channel = 3; // 通道
}

// Request 请求结构体
message Request {
  string request_id = 1; // 请求ID
  string client_id = 2; // 客户端ID
  int64 sent_at = 3; // 发送时间
  int64 expiry = 4; // 过期时间
  bool multi = 5; // 是否多路复用
  google.protobuf.Any request = 6; // 请求消息体？（protobuf格式）
  map<string, string> metadata = 7; // 元数据
  bytes raw_request = 8; // 原始请求
}

// Response 响应结构体
message Response {
  string request_id = 1; // 请求ID
  string server_id = 2; // 服务器ID
  int64 sent_at = 3; // 发送时间
  google.protobuf.Any response = 4; // 响应消息体？（protobuf格式）
  string error = 5; // 错误信息
  string code = 6; // 错误代码
  bytes raw_response = 7; // 原始响应
  repeated google.protobuf.Any error_details = 8; // 错误详情（protobuf格式）
}

// ClaimRequest Claim请求结构体
message ClaimRequest {
  string request_id = 1; // 请求ID
  string server_id = 2; // 服务器ID
  float affinity = 3; // 亲和力
}

// ClaimResponse Claim响应结构体
message ClaimResponse {
  string request_id = 1; // 请求ID
  string server_id = 2; // 服务器ID
}

// Stream 流结构体
message Stream {
  string stream_id = 1; // 流ID
  string request_id = 2; // 请求ID
  int64 sent_at = 3; // 发送时间
  int64 expiry = 4; // 过期时间
  oneof body {
    StreamOpen open = 5; // 流打开
    StreamMessage message = 6; // 流消息
    StreamAck ack = 7; // 流确认
    StreamClose close = 8; // 流关闭
  }
}

// StreamOpen 流打开结构体
message StreamOpen {
  string node_id = 1; // 节点ID
  map<string, string> metadata = 7; // 元数据
}

message StreamMessage {
  google.protobuf.Any message = 1; // 消息体？（protobuf格式）
  bytes raw_message = 2; // 原始消息
}

// StreamAck 流确认结构体
message StreamAck {}

// StreamClose 流关闭结构体
message StreamClose {
  string error = 1; // 错误信息
  string code = 2; // 错误代码
}
